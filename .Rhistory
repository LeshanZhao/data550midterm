ifelse(is.na(ICUAdmin),
NA_character_,
ifelse(nchar(strsplit(ICUAdmin," ")[[1]][1]) == 8, "%m/%d/%y", "%m/%d/%Y")
)
),
CollectionDate = as.Date(substr(CollectionDate, 1, 8),format=ifelse(nchar(strsplit(CollectionDate," ")[[1]][1]) == 8, "%m/%d/%y", "%m/%d/%Y"))
) %>%
# arrange(Name) %>%
filter(Included == 1) %>%
select(-Included) %>%
# filter(n() > 1) %>%
ungroup() %>%
ungroup() %>%
rename()
paste0("CCI", as.character(1:17))
df_distinct = df %>%
distinct(MRN, .keep_all=TRUE)
df_blood = df %>% filter(SampleType == "BLOOD")
df_blood_distinct = df_blood %>%
distinct(MRN, .keep_all = TRUE)
df_fit =  df %>%
mutate(time = as.numeric(DiscDate - AdmDate)) %>%
# mutate(time = DiscDate - AdmDate) %>%
mutate(TimeToDeath = ifelse(DiscStatus==0, time, NA)) %>%
# mutate(time_d = ifelse(DiscStatus==0, time, NA)) %>%
mutate(censor = ifelse(DiscStatus==0, 1, 0)) %>%
mutate(Race = as.factor(Race)) %>%
select(MRN,
time,
censor,
# TimeToDisc,
# TimeToDeath,
Age,
Gender,
Weight,
BMI,
Race,
Pathogenic,
HIV,
ImmuSupr,
AdmTo1stPathoTime,
PersCandi,
TPN,
CVC,
MV,
AbdSurgery,
BurnReqHosp,
PrevAbx,
# PrevAntif,
# AntifType,
CCI,
# 47:49,
64:66,
38:54) %>%
distinct(MRN, .keep_all = TRUE) %>%
rename()
# df_fit_noNA = df_fit[(!is.na(df_fit$TimeToDeath)),] %>%
#   filter(complete.cases(.))
df_fit_noNA = df_fit %>%
filter(complete.cases(.))
fit_result = survfit(Surv(time, censor) ~ 1, data=df_fit)
fit_result
df_fit
df_fit_noPatho = df_fit[df_fit$Pathogenic==0,] %>%
select(c(-Pathogenic,
-HIV,
-AdmTo1stPathoTime)) %>%
rename()
df_fit_Patho = df_fit[df_fit$Pathogenic==1,] %>%
select(c(-Pathogenic,
-HIV,
-AdmTo1stPathoTime)) %>%
rename()
surv_object <- Surv(time = df_fit_Patho$time, event = df_fit_Patho$censor)
df_fit_Patho$Race = as.factor(df_fit_Patho$Race)
# 排除TimeToDisc和MRN列，仅使用协变量
covariates <- df_fit_Patho[, 4:ncol(df_fit_Patho)]
# 构建Cox比例风险模型
cox_model <- coxph(surv_object ~ Race, data = covariates)
# 查看结果
summary_model = summary(cox_model)
HR = summary_model$coef[1, "exp(coef)"]
lowerCI = summary_model$conf.int[1, "lower .95"]
upperCI = summary_model$conf.int[1, "upper .95"]
HR = summary_model$coef[1, "Pr(>|z|)"]
result = data.frame()
# 构建生存对象
surv_object <- Surv(time = df_fit_Patho$time, event = df_fit_Patho$censor)
# 排除不需要的列，仅使用协变量
covariates <- df_fit_Patho[, 4:ncol(df_fit_Patho)]
# 初始化结果列表
results <- lapply(names(covariates), function(var) {
# 构建单变量Cox模型
formula <- as.formula(paste("surv_object ~", var))
cox_model <- coxph(formula, data = df_fit_Patho)
# 提取所需的统计量
summary_model <- summary(cox_model)
HR <- summary_model$coef[1, "exp(coef)"]
lowerCI <- summary_model$conf.int[1, "lower .95"]
upperCI <- summary_model$conf.int[1, "upper .95"]
pvalue <- summary_model$coef[1, "Pr(>|z|)"]
# 返回数据框
data.frame(
Variable = var,
HR = round(HR,2),
lowerCI = round(lowerCI,2),
upperCI = round(upperCI,2),
pvalue = round(pvalue,4)
)
})
View(df_blood)
View(df)
View(df_fit_noPatho)
knitr::opts_chunk$set(echo = TRUE)
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1)) +
scale_color_gradient(low = "white", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE)) +
scale_color_gradient(low = "white", high = "red", name = "Astocyte APOE") +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
simulate <- function(length = 2000, width = 2000, lambda1 = 0.0016, lambda2 = 0.0004, mu1 = 4.18, std1 = 4.06, d = 25, a1 = -0.1, b1 = 2.538, a2 = -0.01, b2=2.162, mu_err = 0, sigma2_err = 0) {
# 计算A型细胞和B型细胞的数量 - 随机
num_A <- rpois(1, lambda1 * length * width)
num_B <- rpois(1, lambda2 * length * width)
# # 计算A型细胞和B型细胞的数量 - 固定
# num_A <- lambda1 * length * width
# num_B <- lambda2 * length * width
# 生成A型细胞和B型细胞的位置
df1 <- data.frame(x_pixel = runif(num_A, 0, length), y_pixel = runif(num_A, 0, width))
df2 <- data.frame(x_pixel = runif(num_B, 0, length), y_pixel = runif(num_B, 0, width))
# 为A型细胞生成NRN1值
df1$NRN1 <- log1p(pmax(
rnorm(num_A, mu1, std1),
0))
# df1$NRN1 <- log1p(pmax(
#   rnorm(num_A, mu1, std1),
#   0))
# 寻找每个B型细胞最近的A型细胞
nearest <- sapply(1:nrow(df2), function(i) {
distances <- sqrt((df2$x_pixel[i] - df1$x_pixel)^2 + (df2$y_pixel[i] - df1$y_pixel)^2)
which.min(distances)
})
df2$NN_ID <- nearest
df2$NN_x <- df1$x_pixel[nearest]
df2$NN_y <- df1$y_pixel[nearest]
df2$NN_NRN1 <- df1$NRN1[nearest]
# 计算NN_distance
df2$NN_distance <- sqrt((df2$x_pixel - df2$NN_x)^2 + (df2$y_pixel - df2$NN_y)^2)
# 生成epsilon值
if (sigma2_err == 0) {
df2$epsilon <- rep(mu_err, nrow(df2))
} else {
df2$epsilon <- rnorm(nrow(df2), mu_err, sqrt(sigma2_err))
}
# # 计算b2 - both 方案12适用
# b2 <- d * (a1 - a2) + b1
# # # 计算APOE值 - 方案1: NRN1 = a* APOE + b + error
# # df2$APOE <- ifelse(df2$NN_distance < d,
# #                    (df2$NN_NRN1 - b1 - df2$epsilon) / a1,
# #                    (df2$NN_NRN1 - df2$epsilon - b2) / a2)
# 计算APOE值 - 方案2: APOE = A * NRN1 + b + error
# df2$APOE <- ifelse(df2$NN_distance < d,
#                    df2$NN_NRN1 * a1 + b1 + df2$epsilon,
#                    df2$NN_NRN1 * a2 + b2 + df2$epsilon)
# 计算APOE值 - 方案3: APOE ~ N(mu2, std2)
# 计算APOE值 - 方案4: APOE ~ N(mu2, std2) - 简单版本
a = 2
b = 1.2
# mu_NRN1 = mean(df1$NRN1)
# df2$mu21 = a * mu_NRN1 + b
df2$mu21 = a * df2$NN_NRN1 + b
df2$std21 = 0.1
df2$mu22 = b
# df2$std22 = 1.83
df2$std22 = 1
df2$APOE <- mapply(function(NN_distance, mu21, mu22, std21, std22) {
if (NN_distance < d) {
return(rnorm(1, mu21, std21))  # 为每行生成一个随机数
} else {
return(sample(c(rnorm(1, mu22, std22), 0), 1))  # 为每行生成一个随机数
}
}, df2$NN_distance, df2$mu21, df2$mu22, df2$std21, df2$std22)
# 计算APOE值 - 去负值
df2$APOE <- pmax(0, df2$APOE)
# 返回两个dataframe
return(list(df1 = df1, df2 = df2))
}
# 运行模拟
results <- simulate(length = 2000,
width = 2000,
lambda1 = 0.0004,
lambda2 = 0.0001,
mu1 = 4.18,
std1 = 4.06,
d = 25,
a1 = 0.1,
b1 = 1.70,
a2 = 0.01,
b2=2.07,
mu_err = 0.1,
sigma2_err = 0.01)
df1 <- results$df1
df2 <- results$df2
# 使用基础R的hist()绘制直方图
hist(df1$NRN1, breaks=50, main="Distribution of NRN1",
xlab="NRN1 Values", col="skyblue", border="black")
# 使用基础R的hist()绘制直方图
hist(expm1(df1$NRN1), breaks=50, main="Distribution of NRN1",
xlab="NRN1 Values", col="skyblue", border="black")
library(ggplot2)
ggplot(df1, aes(x=NRN1)) +
geom_histogram(bins=50, fill="skyblue", color="black") +
labs(title="Distribution of NRN1", x="NRN1 Values", y="Count")
ggplot(expm1(df1), aes(x=NRN1)) +
geom_histogram(bins=50, fill="skyblue", color="black") +
labs(title="Distribution of NRN1", x="NRN1 Values", y="Count")
library(ggplot2)
ggplot(df2, aes(x=NN_distance)) +
geom_histogram(bins=50, fill="skyblue", color="black") +
labs(title="Distribution of distance", x="Distance from an Astrocyte to Nearest Neuron Values", y="Count")
library(ggplot2)
ggplot(expm1(df2), aes(x=APOE)) +
geom_histogram(bins=50, fill="skyblue", color="black") +
labs(title="Distribution of exp(GPX4)-1", x="GPX4 Values", y="Count")
ggplot(df2, aes(x=APOE)) +
geom_histogram(bins=50, fill="skyblue", color="black") +
labs(title="Simulated Distribution of Apoe", x="Apoe Values", y="Count")
# 如果尚未安装，请先安装所需的包
# install.packages("ggplot2")
# install.packages("ggnewscale")
# 加载必要的库
library(ggplot2)
library(ggnewscale)
# 假设您的数据框是 df1 和 df2
# 使用 ggplot2 开始绘图
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1)) +
scale_color_gradient(low = "white", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE)) +
scale_color_gradient(low = "white", high = "red", name = "Astocyte APOE") +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1)) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
# 假设您的数据框是 df1 和 df2
# 使用 ggplot2 开始绘图
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1080, 1130), ylim = c(200, 400)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1700, 1900), ylim = c(400, 500)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1800, 1900), ylim = c(400, 500)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1850, 1950), ylim = c(400, 500)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1850, 1950), ylim = c(400, 600)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1850, 1950), ylim = c(400, 530)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1850, 1930), ylim = c(400, 530)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), size=20) +
scale_color_gradient(low = "white", high = "forestgreen", name = "Astocyte APOE") +
# 添加新的填充刻度
new_scale_fill() +
# 绘制 df1 的点，添加极细的轮廓
geom_point(
data = df1,
aes(x = x_pixel, y = y_pixel, fill = NRN1),
shape = 21,       # 使用有边框和填充的圆形
color = "lightgrey",  # 边框颜色
stroke = 0.01,      # 边框粗细
size=20
) +
scale_fill_gradient(low = "white", high = "red", name = "Neuron NRN1") +
coord_cartesian(xlim = c(700, 800), ylim = c(100, 200)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X", y = "Y") +
# 美化主题（可选）
theme_minimal()
1080
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(700, 800), ylim = c(100, 200)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(700, 800), ylim = c(80, 160)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(680, 790), ylim = c(80, 160)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
getwd()
setwd("D:/zls/Emory/Courses/2024 Fall/DATA 550/Assignments/MidtermProject/data550midterm")
renv::restore()
renv::restore()
renv::restore()
renv::status()
source("env/activate.R")
getwd()
source("renv/activate.R")
renv::rstore()
renv::restore()
renv::restore()
setwd("D:/zls/Emory/Courses/2024 Fall/DATA 550/Assignments/MidtermProject/data550midterm")
renv::deactivate()
.libPaths()
installed.packages()
if ("Rcpp" %in% rownames(installed.packages())) {
print("Rcpp 已安装")
} else {
print("Rcpp 未安装")
}
install.packages("Rcpp")
.libPaths()
source('renv/activate.R')
renv::cache.clean()
renv::deactivate()
rownames(installed.packages())
installed.packages()["Rcpp", "Version"]
source('renv/activate.R')
renv::restore()
renv::restore()
renv::restore()
renv::restore()
renv::restore()
renv::restore()
renv::restore()
renv::restore()
renv::snapshot()
.libPaths()
install.packages("yaml")
renv::snapshot()
here::i_am("code/01_make_tables.R")
# Frequency of demographic variables (AGE, SEX, CASE_STATUS)---------------------------------------------------------------------
table_resp =
# Frequency of respiratory diseases (PNEUMONIA, COPD, and ASTHMA)---------------------------------------------------------------------
table_resp <- covid %>%
select(CASE_STATUS, PNEUMONIA, COPD, ASTHMA) %>%
group_by(CASE_STATUS) %>%
summarise(
PNEUMONIA = sum(PNEUMONIA == "Yes", na.rm = TRUE),
COPD = sum(COPD == "Yes", na.rm = TRUE),
ASTHMA = sum(ASTHMA == "Yes", na.rm = TRUE),
)
library(here)
library(dplyr)
table_resp <- covid %>%
select(CASE_STATUS, PNEUMONIA, COPD, ASTHMA) %>%
group_by(CASE_STATUS) %>%
summarise(
PNEUMONIA = sum(PNEUMONIA == "Yes", na.rm = TRUE),
COPD = sum(COPD == "Yes", na.rm = TRUE),
ASTHMA = sum(ASTHMA == "Yes", na.rm = TRUE),
)
# Load the cleaned data
covid <- readRDS(here::here("output/data_clean.rds"))
table_resp <- covid %>%
select(CASE_STATUS, PNEUMONIA, COPD, ASTHMA) %>%
group_by(CASE_STATUS) %>%
summarise(
PNEUMONIA = sum(PNEUMONIA == "Yes", na.rm = TRUE),
COPD = sum(COPD == "Yes", na.rm = TRUE),
ASTHMA = sum(ASTHMA == "Yes", na.rm = TRUE),
)
class(table_resp)
# Frequency of demographic variables (AGE, SEX, CASE_STATUS)---------------------------------------------------------------------
table_resp = data.frame()
# Frequency of demographic variables (AGE, SEX, CASE_STATUS)---------------------------------------------------------------------
table_demog = data.frame()
# Frequency of demographic variables (AGE, SEX, CASE_STATUS)---------------------------------------------------------------------
table_demographics = data.frame()
